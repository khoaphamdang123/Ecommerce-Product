// <auto-generated />
using System;
using Ecommerce_Product.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce_Product.Migrations.EcommerceShop
{
    [DbContext(typeof(GarminvnEcommerceShopContext))]
    [Migration("20241015040644_EcommerceSchema")]
    partial class EcommerceSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("character varying");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying");

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Created_Date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Gender")
                        .HasColumnType("character varying");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Seq")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("auto_increment")
                        .HasColumnName("seq");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Seq"));

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bannername")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("bannername");

                    b.Property<DateTime?>("Createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<string>("Updateddate")
                        .HasColumnType("character varying")
                        .HasColumnName("updateddate");

                    b.HasKey("Id")
                        .HasName("banner_pk");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("nextval('\"Brand_id_seq\"'::regclass)");

                    b.Property<string>("BrandName")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Created_Date");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("brand_pk");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Createddate")
                        .HasColumnType("character varying")
                        .HasColumnName("createddate");

                    b.Property<string>("Updateddate")
                        .HasColumnType("character varying")
                        .HasColumnName("updateddate");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("cart_pk");

                    b.HasIndex("Userid");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cartid")
                        .HasColumnType("int")
                        .HasColumnName("cartid");

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("cart_detail_pk");

                    b.HasIndex("Cartid");

                    b.HasIndex("Productid");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("nextval('category_id_seq'::regclass)");

                    b.Property<string>("Avatar")
                        .HasColumnType("character varying");

                    b.Property<string>("CategoryName")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Created_Date");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("category_pk");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Categorybranddetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("nextval('\"CategoryBrandDetail_id_seq\"'::regclass)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("categorybranddetail_pk");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categorybranddetail", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Colorname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("colorname");

                    b.HasKey("Id")
                        .HasName("color_pk");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Mirror", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mirrorname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("mirrorname");

                    b.HasKey("Id")
                        .HasName("mirror_pk");

                    b.ToTable("Mirror", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Createddate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("createddate");

                    b.Property<int>("Paymentid")
                        .HasColumnType("int")
                        .HasColumnName("paymentid");

                    b.Property<string>("Shippingaddress")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("shippingaddress");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("order_pk");

                    b.HasIndex("Paymentid");

                    b.HasIndex("Userid");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<int>("Orderid")
                        .HasColumnType("int")
                        .HasColumnName("orderid");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("order_detail_pk");

                    b.HasIndex("Orderid");

                    b.HasIndex("Productid");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Createddate")
                        .HasColumnType("character varying")
                        .HasColumnName("createddate");

                    b.Property<string>("Paymentname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("paymentname");

                    b.Property<string>("Updateddate")
                        .HasColumnType("character varying")
                        .HasColumnName("updateddate");

                    b.HasKey("Id")
                        .HasName("payment_pk");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("nextval('\"Product_id_seq\"'::regclass)");

                    b.Property<string>("Backavatar")
                        .HasColumnType("character varying")
                        .HasColumnName("backavatar");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("character varying");

                    b.Property<string>("Frontavatar")
                        .HasColumnType("character varying")
                        .HasColumnName("frontavatar");

                    b.Property<string>("InboxDescription")
                        .HasColumnType("character varying");

                    b.Property<string>("Price")
                        .HasColumnType("character varying");

                    b.Property<string>("ProductName")
                        .HasColumnType("character varying");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("character varying");

                    b.Property<int?>("SubCatId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("product_pk");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCatId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Productimages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("avatar");

                    b.Property<int?>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.HasKey("Id")
                        .HasName("productimage_pk");

                    b.HasIndex("Productid");

                    b.ToTable("Productimages");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("App")
                        .HasColumnType("character varying")
                        .HasColumnName("app");

                    b.Property<string>("Createddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("createddate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Settingname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("settingname");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Updateddate")
                        .HasColumnType("character varying")
                        .HasColumnName("updateddate");

                    b.HasKey("Id")
                        .HasName("setting_pk");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Sizename")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("sizename");

                    b.HasKey("Id")
                        .HasName("size_pk");

                    b.ToTable("size", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Staticfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<string>("Createddate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("createddate");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("filename");

                    b.Property<string>("Updateddate")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("updateddate");

                    b.HasKey("Id")
                        .HasName("staticfile_pk");

                    b.ToTable("Staticfile", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("nextval('subcategory_id_seq'::regclass)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Created_Date");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedDate")
                        .HasColumnType("character varying")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("subcategory_pk");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategory", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Colorid")
                        .HasColumnType("int")
                        .HasColumnName("colorid");

                    b.Property<int?>("Mirrorid")
                        .HasColumnType("int")
                        .HasColumnName("mirrorid");

                    b.Property<int?>("Productid")
                        .HasColumnType("int")
                        .HasColumnName("productid");

                    b.Property<int?>("Sizeid")
                        .HasColumnType("int")
                        .HasColumnName("sizeid");

                    b.Property<int?>("Versionid")
                        .HasColumnType("int")
                        .HasColumnName("versionid");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("variant_pk");

                    b.HasIndex("Colorid");

                    b.HasIndex("Mirrorid");

                    b.HasIndex("Productid");

                    b.HasIndex("Sizeid");

                    b.HasIndex("Versionid");

                    b.ToTable("variant", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Versionname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("versionname");

                    b.HasKey("Id")
                        .HasName("version_pk");

                    b.ToTable("Version", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Product.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Cart", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.AspNetUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cart_user_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.CartDetail", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("Cartid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cartdetail_cart_fk");

                    b.HasOne("Ecommerce_Product.Models.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cart_product_fk");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Categorybranddetail", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Brand", "Brand")
                        .WithMany("Categorybranddetails")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("brand_fk");

                    b.HasOne("Ecommerce_Product.Models.Category", "Category")
                        .WithMany("Categorybranddetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("category_fk");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Order", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("Paymentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_payment_fk");

                    b.HasOne("Ecommerce_Product.Models.AspNetUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_user_fk");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.OrderDetail", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Order", "Order")
                        .WithMany("Orderdetails")
                        .HasForeignKey("Orderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("orderdetail_order_fk");

                    b.HasOne("Ecommerce_Product.Models.Product", "Product")
                        .WithMany("Orderdetails")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("orderdetail_product_fk");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Product", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_brand_fk");

                    b.HasOne("Ecommerce_Product.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_cat_fk");

                    b.HasOne("Ecommerce_Product.Models.Subcategory", "SubCat")
                        .WithMany("Products")
                        .HasForeignKey("SubCatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_sub_cat_fk");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SubCat");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Productimages", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Product", "Product")
                        .WithMany("Productimages")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_img_fk");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Subcategory", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sub_cat_fk");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Variant", b =>
                {
                    b.HasOne("Ecommerce_Product.Models.Color", "Color")
                        .WithMany("Variants")
                        .HasForeignKey("Colorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("color_fk");

                    b.HasOne("Ecommerce_Product.Models.Mirror", "Mirror")
                        .WithMany("Variants")
                        .HasForeignKey("Mirrorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mirror_fk");

                    b.HasOne("Ecommerce_Product.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("Productid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_fk");

                    b.HasOne("Ecommerce_Product.Models.Size", "Size")
                        .WithMany("Variants")
                        .HasForeignKey("Sizeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("size_fk");

                    b.HasOne("Ecommerce_Product.Models.Version", "Version")
                        .WithMany("Variants")
                        .HasForeignKey("Versionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("version_fk");

                    b.Navigation("Color");

                    b.Navigation("Mirror");

                    b.Navigation("Product");

                    b.Navigation("Size");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Brand", b =>
                {
                    b.Navigation("Categorybranddetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Category", b =>
                {
                    b.Navigation("Categorybranddetails");

                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Color", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Mirror", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Order", b =>
                {
                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("Orderdetails");

                    b.Navigation("Productimages");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Size", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce_Product.Models.Version", b =>
                {
                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
